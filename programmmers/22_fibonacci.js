
// fibonacci
// 문제
// 아래와 같이 정의된 피보나치 수열 중 n번째 항의 수를 리턴해야 합니다.

// 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1입니다. 그 다음 2번째 피보나치 수부터는 바로 직전의 두 피보나치 수의 합으로 정의합니다.
// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...
// 입력
// 인자 1 : n
// number 타입의 n (n은 0 이상의 정수)
// 출력
// number 타입을 리턴해야합니다.
// 주의사항
// 재귀함수를 이용해 구현해야 합니다.
// 반복문(for, while) 사용은 금지됩니다.
// 함수 fibonacci가 반드시 재귀함수일 필요는 없습니다.

function fibonacci(n) {
    // TODO: 여기에 코드를 작성합니다.
   //일단 초기 배열이 [0, 1]에서 시작하여 배열의 요소를 누적해 나가는 방법
   //그리고 이미 구해놓은 것은 배열의 요소로 저장해놓기..!!! 그래야 런타임이 초과되지 않는다
  
   let newArr = [0, 1]; //0번째 1번째 요소는 고정시켜두고 
   
    let fib = (n) => { //함수 한개를 선언해주고
      if (newArr[n] !== undefined){ 
        return newArr[n]; //이미 있는 건 그대로 리턴
      }
      newArr[n] = fib(n - 1) + fib(n - 2); //없는 건 새로 만들어서 저장!!!*****
      return newArr[n];
    };
    
    return fib(n); 
  }
  
  fibonacci(4);